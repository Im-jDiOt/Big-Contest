<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/scripts/run_all.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/run_all.bat" />
              <option name="originalContent" value="@echo off&#10;setlocal&#10;cd /d %~dp0\..&#10;&#10;REM 1) 의존성 설치&#10;python -m pip install -r requirements.txt || goto :eof&#10;&#10;REM 2) 스냅샷 스코어(최근접 상권 매핑→HHI/밀도→등급)&#10;python src\trade_area_scoring_snapshot.py || goto :eof&#10;&#10;REM 3) 상권 패널(분기별 수요/매출/공급/변화율/변동성/폐업률)&#10;python src\trade_area_panel.py || goto :eof&#10;&#10;REM 4) 지도학습 스코어(다음 분기 폐업률 예측 기반 0~100)&#10;python src\trade_area_score_ml.py || goto :eof&#10;&#10;REM 5) 리포트(상위 위험 상권 프린트)&#10;python src\report_top_risk.py || goto :eof&#10;&#10;echo DONE&#10;endlocal&#10;&#10;" />
              <option name="updatedContent" value="@echo off&#10;setlocal&#10;cd /d %~dp0\..&#10;&#10;REM 1) 의존성 설치&#10;python -m pip install -r requirements.txt || goto :eof&#10;&#10;REM 2) 스냅샷 스코어(최근접 상권 매핑→HHI/밀도→등급)&#10;python src\trade_area_scoring_snapshot.py || goto :eof&#10;&#10;REM 3) 상권 패널(분기별 수요/매출/공급/변화율/변동성/폐업률)&#10;python src\trade_area_panel.py || goto :eof&#10;&#10;REM 4) 지도학습 스코어(다음 분기 폐업률 예측 기반 0~100)&#10;python src\trade_area_score_ml.py || goto :eof&#10;&#10;REM 5) 리포트(상위 위험 상권 프린트)&#10;python src\report_top_risk.py || goto :eof&#10;&#10;REM 6) 폐업률 안정성(평균/표준편차/급변/추세)&#10;python src\analysis_closure_stability.py || goto :eof&#10;&#10;REM 7) 요인 분해(ElasticNet/GBR 중요도)&#10;python src\analysis_factor_decomposition.py || goto :eof&#10;&#10;REM 8) U-Shape(경쟁/밀도 비선형 관계)&#10;python src\analysis_u_shape.py || goto :eof&#10;&#10;REM 9) 공간 확산(Moran's I, Spatial Lag)&#10;python src\analysis_spatial_diffusion.py || goto :eof&#10;&#10;echo DONE&#10;endlocal" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/trade_area_panel.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/trade_area_panel.py" />
              <option name="originalContent" value="from __future__ import annotations&#10;from pathlib import Path&#10;import numpy as np&#10;import pandas as pd&#10;from typing import List, Optional&#10;&#10;from utils.io import read_csv_smart, find_column&#10;from utils.features import make_period, yoy_change, rolling_vol, minmax_scale&#10;&#10;BASE = Path(__file__).resolve().parents[1]&#10;RAW = BASE / &quot;data&quot; / &quot;raw&quot; / &quot;서울시_상권분석서비스&quot;&#10;OUT = BASE / &quot;data&quot; / &quot;processed&quot;&#10;OUT.mkdir(parents=True, exist_ok=True)&#10;&#10;# ---------- Helpers ----------&#10;&#10;def _detect_period_cols(df: pd.DataFrame) -&gt; tuple[str, str]:&#10;    y = find_column(df, [&quot;기준_년&quot;, &quot;기준_연도&quot;, &quot;년&quot;, &quot;year&quot;, &quot;YYYY&quot;, &quot;BASE_YR&quot;]) or df.columns[0]&#10;    q = find_column(df, [&quot;기준_분기&quot;, &quot;분기&quot;, &quot;quarter&quot;, &quot;QQ&quot;, &quot;BASE_QT&quot;]) or df.columns[1]&#10;    return y, q&#10;&#10;&#10;def _detect_ta_col(df: pd.DataFrame) -&gt; str:&#10;    return find_column(df, [&quot;상권_코드&quot;, &quot;상권코드&quot;, &quot;trdar_cd&quot;, &quot;상권 코드&quot;, &quot;코드&quot;, &quot;상권ID&quot;, &quot;ID&quot;]) or df.columns[2]&#10;&#10;&#10;def _numeric_sum(df: pd.DataFrame, include_sub: List[str]) -&gt; pd.Series:&#10;    cols = [c for c in df.columns if any(s in c for s in include_sub)]&#10;    num = df[cols].apply(pd.to_numeric, errors=&quot;coerce&quot;)&#10;    return num.sum(axis=1)&#10;&#10;# ---------- Loaders ----------&#10;&#10;def load_trade_area_master(path: Path) -&gt; pd.DataFrame:&#10;    df = read_csv_smart(str(path), nrows=200)&#10;    ta_col = _detect_ta_col(df)&#10;    x_col = find_column(df, [&quot;중심좌표_x&quot;, &quot;x좌표&quot;, &quot;x&quot;, &quot;중심x&quot;, &quot;좌표x&quot;]) or df.columns[4]&#10;    y_col = find_column(df, [&quot;중심좌표_y&quot;, &quot;y좌표&quot;, &quot;y&quot;, &quot;중심y&quot;, &quot;좌표y&quot;]) or df.columns[5]&#10;    area_col = find_column(df, [&quot;면적&quot;, &quot;상권_면적&quot;, &quot;영역면적&quot;, &quot;area&quot;, &quot;면적(m2)&quot;])&#10;    use = list({ta_col, x_col, y_col} | ({area_col} if area_col else set()))&#10;    full = read_csv_smart(str(path), usecols=use)&#10;    full = full.rename(columns={ta_col: &quot;trade_area_id&quot;, x_col: &quot;ta_x&quot;, y_col: &quot;ta_y&quot;})&#10;    if area_col: full = full.rename(columns={area_col: &quot;area_m2&quot;})&#10;    for c in [&quot;ta_x&quot;, &quot;ta_y&quot;, &quot;area_m2&quot;]:&#10;        if c in full.columns: full[c] = pd.to_numeric(full[c], errors=&quot;coerce&quot;)&#10;    full = full.dropna(subset=[&quot;ta_x&quot;, &quot;ta_y&quot;]).drop_duplicates(&quot;trade_area_id&quot;).reset_index(drop=True)&#10;    return full&#10;&#10;&#10;def load_population(path: Path, key_substr: List[str]) -&gt; pd.DataFrame:&#10;    df = read_csv_smart(str(path))&#10;    ta_col = _detect_ta_col(df)&#10;    y_col, q_col = _detect_period_cols(df)&#10;    val = _numeric_sum(df, key_substr)&#10;    out = df[[ta_col, y_col, q_col]].copy()&#10;    out[&quot;value&quot;] = val&#10;    out = out.rename(columns={ta_col: &quot;trade_area_id&quot;, y_col: &quot;year&quot;, q_col: &quot;quarter&quot;})&#10;    out = make_period(out, &quot;year&quot;, &quot;quarter&quot;)&#10;    out = out.groupby([&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;], as_index=False)[&quot;value&quot;].sum()&#10;    return out&#10;&#10;&#10;def load_sales(files: List[Path]) -&gt; pd.DataFrame:&#10;    frames = []&#10;    for p in files:&#10;        df = read_csv_smart(str(p))&#10;        ta_col = _detect_ta_col(df)&#10;        y_col, q_col = _detect_period_cols(df)&#10;        # value: any column with 매출/금액/추정&#10;        cand_cols = [c for c in df.columns if any(s in c for s in [&quot;매출&quot;, &quot;금액&quot;, &quot;추정&quot;])]&#10;        if not cand_cols:&#10;            continue&#10;        val = df[cand_cols].apply(pd.to_numeric, errors=&quot;coerce&quot;).sum(axis=1)&#10;        out = df[[ta_col, y_col, q_col]].copy()&#10;        out[&quot;sales&quot;] = val&#10;        out = out.rename(columns={ta_col: &quot;trade_area_id&quot;, y_col: &quot;year&quot;, q_col: &quot;quarter&quot;})&#10;        out = make_period(out, &quot;year&quot;, &quot;quarter&quot;)&#10;        frames.append(out[[&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;sales&quot;]])&#10;    if not frames:&#10;        return pd.DataFrame(columns=[&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;sales&quot;])&#10;    all_df = pd.concat(frames, ignore_index=True)&#10;    all_df = all_df.groupby([&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;], as_index=False)[&quot;sales&quot;].sum()&#10;    return all_df&#10;&#10;&#10;def load_store(file: Path) -&gt; pd.DataFrame:&#10;    df = read_csv_smart(str(file))&#10;    ta_col = _detect_ta_col(df)&#10;    y_col, q_col = _detect_period_cols(df)&#10;    # store count columns&#10;    candidates = [c for c in df.columns if (&quot;점포&quot; in c and (&quot;수&quot; in c or &quot;합계&quot; in c)) or (&quot;사업체&quot; in c and &quot;수&quot; in c)]&#10;    if candidates:&#10;        val = df[candidates].apply(pd.to_numeric, errors=&quot;coerce&quot;).sum(axis=1)&#10;    else:&#10;        # fallback: each row is a store =&gt; count rows per group&#10;        val = pd.Series(1, index=df.index)&#10;    out = df[[ta_col, y_col, q_col]].copy()&#10;    out[&quot;store_cnt&quot;] = val&#10;    out = out.rename(columns={ta_col: &quot;trade_area_id&quot;, y_col: &quot;year&quot;, q_col: &quot;quarter&quot;})&#10;    out = make_period(out, &quot;year&quot;, &quot;quarter&quot;)&#10;    out = out.groupby([&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;], as_index=False)[&quot;store_cnt&quot;].sum()&#10;&#10;    # category for HHI if exists&#10;    cat_col = find_column(df, [&quot;업종&quot;, &quot;업종명&quot;, &quot;서비스업종&quot;, &quot;중분류&quot;, &quot;소분류&quot;, &quot;category&quot;])  # optional&#10;    if cat_col:&#10;        dfc = df[[ta_col, y_col, q_col, cat_col]].copy()&#10;        dfc = dfc.rename(columns={ta_col: &quot;trade_area_id&quot;, y_col: &quot;year&quot;, q_col: &quot;quarter&quot;, cat_col: &quot;category&quot;})&#10;        dfc = make_period(dfc, &quot;year&quot;, &quot;quarter&quot;)&#10;        grp = dfc.groupby([&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;category&quot;]).size().rename(&quot;cnt&quot;).reset_index()&#10;        tot = grp.groupby([&quot;trade_area_id&quot;, &quot;period_id&quot;][0:2])[&quot;cnt&quot;].sum().rename(&quot;tot&quot;).reset_index()&#10;        grp = grp.merge(tot, on=[&quot;trade_area_id&quot;, &quot;period_id&quot;], how=&quot;left&quot;)&#10;        grp[&quot;share&quot;] = grp[&quot;cnt&quot;] / grp[&quot;tot&quot;].replace(0, np.nan)&#10;        hhi = grp.assign(share_sq=lambda d: d[&quot;share&quot;] ** 2).groupby([&quot;trade_area_id&quot;, &quot;period_id&quot;]).agg(hhi=(&quot;share_sq&quot;, &quot;sum&quot;)).reset_index()&#10;    else:&#10;        hhi = pd.DataFrame(columns=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;hhi&quot;])&#10;&#10;    return out, hhi&#10;&#10;# ---------- Build panel ----------&#10;&#10;def build_panel() -&gt; pd.DataFrame:&#10;    ta_master = load_trade_area_master(RAW / &quot;서울시 상권분석서비스(영역-상권).csv&quot;)&#10;&#10;    pop_float = load_population(RAW / &quot;서울시 상권분석서비스(길단위인구-상권).csv&quot;, [&quot;유동&quot;, &quot;이동&quot;, &quot;유입&quot;])  # proxy&#10;    pop_res = load_population(RAW / &quot;서울시 상권분석서비스(상주인구-상권).csv&quot;, [&quot;상주&quot;, &quot;주거&quot;, &quot;거주&quot;, &quot;인구&quot;])&#10;    pop_job = load_population(RAW / &quot;서울시 상권분석서비스(직장인구-상권).csv&quot;, [&quot;직장&quot;, &quot;종사&quot;, &quot;근로&quot;, &quot;인구&quot;])&#10;&#10;    sales_files = [&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2020년.csv&quot;,&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2021년.csv&quot;,&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2022년.csv&quot;,&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2023년.csv&quot;,&#10;        RAW / &quot;서울시 상권분석서비스(추정매출-상권)_2024년.csv&quot;,&#10;    ]&#10;    sales_files = [p for p in sales_files if p.exists()]&#10;    sales = load_sales(sales_files)&#10;&#10;    store, hhi = load_store(RAW / &quot;서울시 상권분석서비스(점포-상권).csv&quot;)&#10;&#10;    # base periods&#10;    periods = pd.concat([&#10;        pop_float[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        pop_res[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        pop_job[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        sales[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        store[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;    ], ignore_index=True).drop_duplicates()&#10;&#10;    panel = periods.copy()&#10;    panel = panel.merge(pop_float.rename(columns={&quot;value&quot;: &quot;pop_float&quot;}), on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(pop_res.rename(columns={&quot;value&quot;: &quot;pop_res&quot;}), on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(pop_job.rename(columns={&quot;value&quot;: &quot;pop_job&quot;}), on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(sales[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;sales&quot;]], on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(store[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;store_cnt&quot;]], on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(hhi, on=[&quot;trade_area_id&quot;, &quot;period_id&quot;], how=&quot;left&quot;)&#10;&#10;    # attach static area for density&#10;    ta_area = load_trade_area_master(RAW / &quot;서울시 상권분석서비스(영역-상권).csv&quot;)[[&quot;trade_area_id&quot;, &quot;area_m2&quot;]]&#10;    panel = panel.merge(ta_area, on=&quot;trade_area_id&quot;, how=&quot;left&quot;)&#10;    panel[&quot;store_density_km2&quot;] = panel.apply(lambda r: (r[&quot;store_cnt&quot;] / (r[&quot;area_m2&quot;] / 1e6)) if pd.notna(r.get(&quot;area_m2&quot;)) and pd.notna(r.get(&quot;store_cnt&quot;)) and r.get(&quot;area_m2&quot;) not in (0, None) else np.nan, axis=1)&#10;&#10;    # sort and lag features&#10;    panel = panel.sort_values([&quot;trade_area_id&quot;, &quot;period_id&quot;]).reset_index(drop=True)&#10;    # lag store count to compute closure/opening proxies&#10;    panel[&quot;store_cnt_prev&quot;] = panel.groupby(&quot;trade_area_id&quot;)[&quot;store_cnt&quot;].shift(1)&#10;    diff = panel[&quot;store_cnt&quot;] - panel[&quot;store_cnt_prev&quot;]&#10;    panel[&quot;openings&quot;] = diff.clip(lower=0).fillna(0)&#10;    panel[&quot;closures&quot;] = (-diff).clip(lower=0).fillna(0)&#10;    panel[&quot;closure_rate&quot;] = np.where(panel[&quot;store_cnt_prev&quot;].fillna(0) &gt; 0, panel[&quot;closures&quot;] / panel[&quot;store_cnt_prev&quot;], np.nan)&#10;    panel[&quot;turnover_rate&quot;] = np.where(((panel[&quot;store_cnt&quot;] + panel[&quot;store_cnt_prev&quot;]).fillna(0) / 2) &gt; 0,&#10;                                       (panel[&quot;openings&quot;] + panel[&quot;closures&quot;]) / ((panel[&quot;store_cnt&quot;] + panel[&quot;store_cnt_prev&quot;]) / 2), np.nan)&#10;&#10;    # YoY and volatility for demand/sales&#10;    for v in [&quot;pop_float&quot;, &quot;pop_res&quot;, &quot;pop_job&quot;, &quot;sales&quot;]:&#10;        panel[f&quot;{v}_yoy&quot;] = panel.groupby(&quot;trade_area_id&quot;).apply(lambda g: yoy_change(g, v)).reset_index(level=0, drop=True)&#10;        panel[f&quot;{v}_vol4&quot;] = panel.groupby(&quot;trade_area_id&quot;).apply(lambda g: rolling_vol(g, v, 4)).reset_index(level=0, drop=True)&#10;&#10;    # export panels&#10;    panel_out = OUT / &quot;trade_area_features.parquet&quot;&#10;    panel.to_parquet(panel_out, index=False)&#10;&#10;    # export closure rates for analysis&#10;    clo = panel[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;closure_rate&quot;, &quot;turnover_rate&quot;]].copy()&#10;    clo_out = OUT / &quot;trade_area_closure_rate.parquet&quot;&#10;    clo.to_parquet(clo_out, index=False)&#10;&#10;    return panel&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    build_panel()&#10;&#10;" />
              <option name="updatedContent" value="from __future__ import annotations&#10;from pathlib import Path&#10;import numpy as np&#10;import pandas as pd&#10;from typing import List, Optional&#10;&#10;from utils.io import read_csv_smart, find_column&#10;from utils.features import make_period, yoy_change, rolling_vol, minmax_scale&#10;&#10;BASE = Path(__file__).resolve().parents[1]&#10;RAW = BASE / &quot;data&quot; / &quot;raw&quot; / &quot;서울시_상권분석서비스&quot;&#10;OUT = BASE / &quot;data&quot; / &quot;processed&quot;&#10;OUT.mkdir(parents=True, exist_ok=True)&#10;&#10;# ---------- Helpers ----------&#10;&#10;def _detect_period_cols(df: pd.DataFrame) -&gt; tuple[Optional[str], Optional[str]]:&#10;    y = find_column(df, [&quot;기준_년&quot;, &quot;기준_연도&quot;, &quot;연도&quot;, &quot;년도&quot;, &quot;년&quot;, &quot;year&quot;, &quot;YYYY&quot;, &quot;BASE_YR&quot;])&#10;    q = find_column(df, [&quot;기준_분기&quot;, &quot;분기&quot;, &quot;quarter&quot;, &quot;QQ&quot;, &quot;BASE_QT&quot;, &quot;분기코드&quot;])&#10;    return y, q&#10;&#10;&#10;def _detect_ta_col(df: pd.DataFrame) -&gt; str:&#10;    return find_column(df, [&quot;상권_코드&quot;, &quot;상권코드&quot;, &quot;trdar_cd&quot;, &quot;상권 코드&quot;, &quot;코드&quot;, &quot;상권ID&quot;, &quot;ID&quot;]) or df.columns[2]&#10;&#10;&#10;def _numeric_sum(df: pd.DataFrame, include_sub: List[str]) -&gt; pd.Series:&#10;    cols = [c for c in df.columns if any(s in c for s in include_sub)]&#10;    if not cols:&#10;        return pd.Series(0, index=df.index, dtype=float)&#10;    num = df[cols].apply(pd.to_numeric, errors=&quot;coerce&quot;)&#10;    return num.sum(axis=1)&#10;&#10;&#10;def _standardize_period(df: pd.DataFrame) -&gt; pd.DataFrame:&#10;    &quot;&quot;&quot;Add 'year' and 'quarter' columns by detecting Y/Q or YM/M columns flexibly.&#10;    Priority: 연월 -&gt; (연,월) -&gt; (연,분기). If only 월 exists with no 연, fails.&#10;    &quot;&quot;&quot;&#10;    work = df.copy()&#10;    y_col, q_col = _detect_period_cols(work)&#10;    ym_col = find_column(work, [&quot;기준_연월&quot;, &quot;연월&quot;, &quot;기준연월&quot;, &quot;base_ym&quot;, &quot;YYYYMM&quot;, &quot;년월&quot;, &quot;연_월&quot;])&#10;    m_col = find_column(work, [&quot;기준_월&quot;, &quot;월&quot;, &quot;month&quot;, &quot;MM&quot;]) if q_col is None else None&#10;&#10;    if ym_col is not None:&#10;        raw = work[ym_col].astype(str)&#10;        # try to extract 6 digits YYYYMM&#10;        s = raw.str.extract(r&quot;(?P&lt;ym&gt;(?:19|20)\d{2}[\-/]?(?:0[1-9]|1[0-2]))&quot;, expand=False)[0]&#10;        # fallback: remove non-digits&#10;        s = s.fillna(raw.str.replace(r&quot;\D&quot;, &quot;&quot;, regex=True))&#10;        y = pd.to_numeric(s.str.slice(0, 4), errors=&quot;coerce&quot;).astype(&quot;Int64&quot;)&#10;        m = pd.to_numeric(s.str.slice(-2), errors=&quot;coerce&quot;).astype(&quot;Int64&quot;)&#10;        q = ((m - 1) // 3 + 1).astype(&quot;Int64&quot;)&#10;        work[&quot;year&quot;], work[&quot;quarter&quot;] = y, q&#10;    elif y_col is not None and q_col is not None:&#10;        y = pd.to_numeric(work[y_col], errors=&quot;coerce&quot;).astype(&quot;Int64&quot;)&#10;        q = pd.to_numeric(work[q_col], errors=&quot;coerce&quot;).astype(&quot;Int64&quot;)&#10;        work[&quot;year&quot;], work[&quot;quarter&quot;] = y, q&#10;    elif y_col is not None and m_col is not None:&#10;        y = pd.to_numeric(work[y_col], errors=&quot;coerce&quot;).astype(&quot;Int64&quot;)&#10;        m = pd.to_numeric(work[m_col], errors=&quot;coerce&quot;).astype(&quot;Int64&quot;)&#10;        q = ((m - 1) // 3 + 1).astype(&quot;Int64&quot;)&#10;        work[&quot;year&quot;], work[&quot;quarter&quot;] = y, q&#10;    else:&#10;        raise ValueError(f&quot;기간 컬럼 탐지 실패: year={y_col}, quarter={q_col}, ym={ym_col}, month={m_col}. cols={list(work.columns)[:30]}&quot;)&#10;&#10;    return work&#10;&#10;# ---------- Loaders ----------&#10;&#10;def load_trade_area_master(path: Path) -&gt; pd.DataFrame:&#10;    df = read_csv_smart(str(path), nrows=200)&#10;    ta_col = _detect_ta_col(df)&#10;    x_col = find_column(df, [&quot;중심좌표_x&quot;, &quot;x좌표&quot;, &quot;x&quot;, &quot;중심x&quot;, &quot;좌표x&quot;]) or df.columns[4]&#10;    y_col = find_column(df, [&quot;중심좌표_y&quot;, &quot;y좌표&quot;, &quot;y&quot;, &quot;중심y&quot;, &quot;좌표y&quot;]) or df.columns[5]&#10;    area_col = find_column(df, [&quot;면적&quot;, &quot;상권_면적&quot;, &quot;영역면적&quot;, &quot;area&quot;, &quot;면적(m2)&quot;])&#10;    use = list({ta_col, x_col, y_col} | ({area_col} if area_col else set()))&#10;    full = read_csv_smart(str(path), usecols=use)&#10;    full = full.rename(columns={ta_col: &quot;trade_area_id&quot;, x_col: &quot;ta_x&quot;, y_col: &quot;ta_y&quot;})&#10;    if area_col: full = full.rename(columns={area_col: &quot;area_m2&quot;})&#10;    for c in [&quot;ta_x&quot;, &quot;ta_y&quot;, &quot;area_m2&quot;]:&#10;        if c in full.columns: full[c] = pd.to_numeric(full[c], errors=&quot;coerce&quot;)&#10;    full = full.dropna(subset=[&quot;ta_x&quot;, &quot;ta_y&quot;]).drop_duplicates(&quot;trade_area_id&quot;).reset_index(drop=True)&#10;    return full&#10;&#10;&#10;def load_population(path: Path, key_substr: List[str]) -&gt; pd.DataFrame:&#10;    df = read_csv_smart(str(path))&#10;    ta_col = _detect_ta_col(df)&#10;    dfp = _standardize_period(df)&#10;    val = _numeric_sum(df, key_substr)&#10;    out = pd.DataFrame({&#10;        &quot;trade_area_id&quot;: df[ta_col].values,&#10;        &quot;year&quot;: dfp[&quot;year&quot;].values,&#10;        &quot;quarter&quot;: dfp[&quot;quarter&quot;].values,&#10;        &quot;value&quot;: val.values,&#10;    })&#10;    out = make_period(out, &quot;year&quot;, &quot;quarter&quot;)&#10;    out = out.groupby([&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;], as_index=False)[&quot;value&quot;].sum()&#10;    return out&#10;&#10;&#10;def load_sales(files: List[Path]) -&gt; pd.DataFrame:&#10;    frames = []&#10;    for p in files:&#10;        df = read_csv_smart(str(p))&#10;        ta_col = _detect_ta_col(df)&#10;        dfp = _standardize_period(df)&#10;        cand_cols = [c for c in df.columns if any(s in c for s in [&quot;매출&quot;, &quot;금액&quot;, &quot;추정&quot;]) and df[c].dtype != 'O']&#10;        if not cand_cols:&#10;            cand_cols = [c for c in df.columns if any(s in c for s in [&quot;매출&quot;, &quot;금액&quot;, &quot;추정&quot;])]&#10;        val = df[cand_cols].apply(pd.to_numeric, errors=&quot;coerce&quot;).sum(axis=1) if cand_cols else pd.Series(0, index=df.index, dtype=float)&#10;        out = pd.DataFrame({&#10;            &quot;trade_area_id&quot;: df[ta_col].values,&#10;            &quot;year&quot;: dfp[&quot;year&quot;].values,&#10;            &quot;quarter&quot;: dfp[&quot;quarter&quot;].values,&#10;            &quot;sales&quot;: val.values,&#10;        })&#10;        out = make_period(out, &quot;year&quot;, &quot;quarter&quot;)&#10;        frames.append(out[[&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;sales&quot;]])&#10;    if not frames:&#10;        return pd.DataFrame(columns=[&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;sales&quot;])&#10;    all_df = pd.concat(frames, ignore_index=True)&#10;    all_df = all_df.groupby([&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;], as_index=False)[&quot;sales&quot;].sum()&#10;    return all_df&#10;&#10;&#10;def load_store(file: Path) -&gt; tuple[pd.DataFrame, pd.DataFrame]:&#10;    df = read_csv_smart(str(file))&#10;    ta_col = _detect_ta_col(df)&#10;    dfp = _standardize_period(df)&#10;    # store count columns&#10;    candidates = [c for c in df.columns if (&quot;점포&quot; in c and (&quot;수&quot; in c or &quot;합계&quot; in c)) or (&quot;사업체&quot; in c and &quot;수&quot; in c)]&#10;    val = df[candidates].apply(pd.to_numeric, errors=&quot;coerce&quot;).sum(axis=1) if candidates else pd.Series(1, index=df.index)&#10;    out = pd.DataFrame({&#10;        &quot;trade_area_id&quot;: df[ta_col].values,&#10;        &quot;year&quot;: dfp[&quot;year&quot;].values,&#10;        &quot;quarter&quot;: dfp[&quot;quarter&quot;].values,&#10;        &quot;store_cnt&quot;: pd.to_numeric(val, errors=&quot;coerce&quot;).values,&#10;    })&#10;    out = make_period(out, &quot;year&quot;, &quot;quarter&quot;)&#10;    out = out.groupby([&quot;trade_area_id&quot;, &quot;year&quot;, &quot;quarter&quot;, &quot;period_id&quot;, &quot;period_str&quot;], as_index=False)[&quot;store_cnt&quot;].sum()&#10;&#10;    # category for HHI if exists&#10;    cat_col = find_column(df, [&quot;업종&quot;, &quot;업종명&quot;, &quot;서비스업종&quot;, &quot;중분류&quot;, &quot;소분류&quot;, &quot;category&quot;])  # optional&#10;    if cat_col:&#10;        dfc = pd.DataFrame({&#10;            &quot;trade_area_id&quot;: df[ta_col].values,&#10;            &quot;period_id&quot;: (dfp[&quot;year&quot;] * 10 + dfp[&quot;quarter&quot;]).astype(&quot;Int64&quot;).values,&#10;            &quot;category&quot;: df[cat_col].astype(str).values,&#10;        })&#10;        grp = dfc.groupby([&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;category&quot;]).size().rename(&quot;cnt&quot;).reset_index()&#10;        tot = grp.groupby([&quot;trade_area_id&quot;, &quot;period_id&quot;]).agg(tot=(&quot;cnt&quot;, &quot;sum&quot;)).reset_index()&#10;        grp = grp.merge(tot, on=[&quot;trade_area_id&quot;, &quot;period_id&quot;], how=&quot;left&quot;)&#10;        grp[&quot;share&quot;] = grp[&quot;cnt&quot;] / grp[&quot;tot&quot;].replace(0, np.nan)&#10;        hhi = grp.assign(share_sq=lambda d: d[&quot;share&quot;] ** 2).groupby([&quot;trade_area_id&quot;, &quot;period_id&quot;]).agg(hhi=(&quot;share_sq&quot;, &quot;sum&quot;)).reset_index()&#10;    else:&#10;        hhi = pd.DataFrame(columns=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;hhi&quot;])&#10;&#10;    return out, hhi&#10;&#10;# ---------- Build panel ----------&#10;&#10;def build_panel() -&gt; pd.DataFrame:&#10;    ta_master = load_trade_area_master(RAW / &quot;서울시 상권분석서비스(영역-상권).csv&quot;)&#10;&#10;    pop_float = load_population(RAW / &quot;서울시 상권분석서비스(길단위인구-상권).csv&quot;, [&quot;유동&quot;, &quot;이동&quot;, &quot;유입&quot;])  # proxy&#10;    pop_res = load_population(RAW / &quot;서울시 상권분석서비스(상주인구-상권).csv&quot;, [&quot;상주&quot;, &quot;주거&quot;, &quot;거주&quot;, &quot;인구&quot;])&#10;    pop_job = load_population(RAW / &quot;서울시 상권분석서비스(직장인구-상권).csv&quot;, [&quot;직장&quot;, &quot;종사&quot;, &quot;근로&quot;, &quot;인구&quot;])&#10;&#10;    sales_files = [&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2020년.csv&quot;,&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2021년.csv&quot;,&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2022년.csv&quot;,&#10;        RAW / &quot;서울시_상권분석서비스(추정매출-상권)_2023년.csv&quot;,&#10;        RAW / &quot;서울시 상권분석서비스(추정매출-상권)_2024년.csv&quot;,&#10;    ]&#10;    sales_files = [p for p in sales_files if p.exists()]&#10;    sales = load_sales(sales_files)&#10;&#10;    store, hhi = load_store(RAW / &quot;서울시 상권분석서비스(점포-상권).csv&quot;)&#10;&#10;    # base periods&#10;    periods = pd.concat([&#10;        pop_float[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        pop_res[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        pop_job[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        sales[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;        store[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;]],&#10;    ], ignore_index=True).drop_duplicates()&#10;&#10;    panel = periods.copy()&#10;    panel = panel.merge(pop_float.rename(columns={&quot;value&quot;: &quot;pop_float&quot;}), on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(pop_res.rename(columns={&quot;value&quot;: &quot;pop_res&quot;}), on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(pop_job.rename(columns={&quot;value&quot;: &quot;pop_job&quot;}), on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(sales[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;sales&quot;]], on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(store[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;store_cnt&quot;]], on=[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;], how=&quot;left&quot;)&#10;    panel = panel.merge(hhi, on=[&quot;trade_area_id&quot;, &quot;period_id&quot;], how=&quot;left&quot;)&#10;&#10;    # attach static area for density&#10;    ta_area = load_trade_area_master(RAW / &quot;서울시 상권분석서비스(영역-상권).csv&quot;)[[&quot;trade_area_id&quot;, &quot;area_m2&quot;]]&#10;    panel = panel.merge(ta_area, on=&quot;trade_area_id&quot;, how=&quot;left&quot;)&#10;    panel[&quot;store_density_km2&quot;] = panel.apply(lambda r: (r[&quot;store_cnt&quot;] / (r[&quot;area_m2&quot;] / 1e6)) if pd.notna(r.get(&quot;area_m2&quot;)) and pd.notna(r.get(&quot;store_cnt&quot;)) and r.get(&quot;area_m2&quot;) not in (0, None) else np.nan, axis=1)&#10;&#10;    # sort and lag features&#10;    panel = panel.sort_values([&quot;trade_area_id&quot;, &quot;period_id&quot;]).reset_index(drop=True)&#10;    # lag store count to compute closure/opening proxies&#10;    panel[&quot;store_cnt_prev&quot;] = panel.groupby(&quot;trade_area_id&quot;)[&quot;store_cnt&quot;].shift(1)&#10;    diff = panel[&quot;store_cnt&quot;] - panel[&quot;store_cnt_prev&quot;]&#10;    panel[&quot;openings&quot;] = diff.clip(lower=0).fillna(0)&#10;    panel[&quot;closures&quot;] = (-diff).clip(lower=0).fillna(0)&#10;    panel[&quot;closure_rate&quot;] = np.where(panel[&quot;store_cnt_prev&quot;].fillna(0) &gt; 0, panel[&quot;closures&quot;] / panel[&quot;store_cnt_prev&quot;], np.nan)&#10;    panel[&quot;turnover_rate&quot;] = np.where(((panel[&quot;store_cnt&quot;] + panel[&quot;store_cnt_prev&quot;]).fillna(0) / 2) &gt; 0,&#10;                                       (panel[&quot;openings&quot;] + panel[&quot;closures&quot;]) / ((panel[&quot;store_cnt&quot;] + panel[&quot;store_cnt_prev&quot;]) / 2), np.nan)&#10;&#10;    # YoY and volatility for demand/sales&#10;    for v in [&quot;pop_float&quot;, &quot;pop_res&quot;, &quot;pop_job&quot;, &quot;sales&quot;]:&#10;        panel[f&quot;{v}_yoy&quot;] = panel.groupby(&quot;trade_area_id&quot;).apply(lambda g: yoy_change(g, v)).reset_index(level=0, drop=True)&#10;        panel[f&quot;{v}_vol4&quot;] = panel.groupby(&quot;trade_area_id&quot;).apply(lambda g: rolling_vol(g, v, 4)).reset_index(level=0, drop=True)&#10;&#10;    # export panels&#10;    panel_out = OUT / &quot;trade_area_features.parquet&quot;&#10;    panel.to_parquet(panel_out, index=False)&#10;&#10;    # export closure rates for analysis&#10;    clo = panel[[&quot;trade_area_id&quot;, &quot;period_id&quot;, &quot;period_str&quot;, &quot;closure_rate&quot;, &quot;turnover_rate&quot;]].copy()&#10;    clo_out = OUT / &quot;trade_area_closure_rate.parquet&quot;&#10;    clo.to_parquet(clo_out, index=False)&#10;&#10;    return panel&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    build_panel()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>